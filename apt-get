args = { ... }
print ("APT-GET VERSION 1.0");


--Returns true if the method wishes to contunue the process.
function HelpCheck()
    if (#args > 0) then
        if (args[1] == "--help") then
            print ("\napt-get [command] [options]\n");
            print ("    install [Program Name]");
            print ("    remove  [Program Name]");
            print ("    reset   [Program Name]");
            return false;
        end
    end
    return true;
end

--Input parser
function ParseInput()
    if (#args > 0) then
        command = args[1];
        if (command == "install") then
            if (#args < 2) then
                print ("Please enter a program to be installed...");
                print ("[ERROR] NO INPUT PROGRAM DEFINED!");
                else
                print ("Installing " .. args[2] .. "...");
                
                InstallProgram(args[2]);
            end
            elseif (command == "remove") then
                if (#args < 2) then
                print ("Please enter a program to be remove...");
                print ("[ERROR] NO INPUT PROGRAM DEFINED!");
                else
                print ("Removing " .. args[2] .. "...");
            end
        end
    end
end

function InstallProgram(ProgramName)
    path = "/Applications/" .. ProgramName;
    if (fs.exists(path)) then
        --If the program already exists, uninstall it and continue with the installation...
        print ("Application " .. ProgramName .. " already exists, reinstalling...");
        fs.delete(path);
        print ("Removed " .. path .. "...");
    end
    
    
    --Check if the program is still installed
    if (fs.exists(path)) then
        --For some reason the program was unable to remove the program for reinstalling it.
        print ("An unexpected error occured when initializing installer: failed to remove directory.");
    else
        --Path to program does not exist (Normal), ready to install program...
        success, servers = findRepositoryServers();
        if (success) then
            print ("Found " .. #servers .. " repository server(s).");
            
            --Select our repository server to work with
            --Choose default: 1
            workingServer = servers[1];
            
            print ("Downloading " .. ProgramName .. " from repo " .. workingServer);
            
            --Send a request to download the program
            rednet.send(workingServer, ProgramName, "STD_REPO_FETCH");
            
            --Download the program with a 5 second time out.
            sender, message, dist, protocol = rednet.receive("STD_REPO", 5);
            
            if (message == nil) then
                --Timeout
                print ("Timed out");
                else
                --Received the program
                
                if (message == "YES") then
                    installedComponents = 0;
                    print ("Repository contains the package!")
                    print ("Installing application...");
                    while (true) do
                        sender, message = rednet.receive("STD_REPO", 5);
                        --Check for end of stream
                        if (message == "END") then
                            print ("Installed " .. installedComponents .. " components.");
                            print (ProgramName .. " was successfully installed!");
                            break;
                        elseif (message == nil) then
                            print ("Server timed out while trying to download the program, the package may or may not have been installed.");
                            break;
                        else
                            --print ("Installing component " .. installedComponents + 1 .. "...")
                            --Create directory for the application to be installed in
                            fs.makeDir(path);
                            
                            --Write the file to HDD
                            writer = fs.open(path .. "/" .. ProgramName, "w");
                            writer.write(message);
                            writer.close();
                            installedComponents = installedComponents + 1;
                        end
                    end
                    elseif (message == "NO") then
                    print ("Package not found " .. ProgramName .. "...");
                end
            end
            
        else
            --Could not find any repository servers.
            print ("No repository servers found");
        end
    end
end
//get a life.
function findRepositoryServers()
    servers = {rednet.lookup("STD_REPO");}
    if (#servers > 0) then
        return true,servers;
    else
        return false;
    end
end

if (HelpCheck()) then
    ParseInput();
end
